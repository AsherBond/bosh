#!/bin/bash

set -eu
set -o pipefail

CURRENT_POSTGRES_VERSION=15
OBSOLETE_VERSIONS=(9.4 10)
## These MUST be in "newest supported to oldest supported" order!
UPGRADEABLE_VERSIONS=(13)

PACKAGE_DIR=/var/vcap/packages/postgres-$CURRENT_POSTGRES_VERSION
PERSISTENT_DISK_DIR=/var/vcap/store
STORE_DIR=${PERSISTENT_DISK_DIR}/postgres-$CURRENT_POSTGRES_VERSION

USER='<%= p("postgres.user") %>'

sysctl -w "kernel.shmmax=67108864"

function print_director_upgrade_recommendation_for {
  case $1 in
      "9.4")
        echo "Please use a previous bosh release version (270.12) to migrate data from postgres-9.4 to postgres-10."
      ;;
      "10")
        echo "Please use a previous bosh release version (280.1.9) to migrate data from postgres-10 to postgres-13."
      ;;
      # Uncomment once 13 is in ${OBSOLETE_VERSIONS}
      # "13")
      #   echo "Please use a previous bosh release version (280.1.9) to migrate data from postgres-13 to postgres-15."
      # ;;
      *)
        echo "Unknown obsolete postgres version: '$1'!"
        echo "Try using a previous bosh release version to migrate data from postgres version '$1' to a supported one."
        ;;
  esac
}

UPGRADEABLE_VERSION_INSTALLED=0
for version in ${UPGRADEABLE_VERSIONS[@]}; do
  if [ -d ${PERSISTENT_DISK_DIR}/postgres-${version} ]; then
    UPGRADEABLE_VERSION_INSTALLED=1
    break
  fi
done

for version in ${OBSOLETE_VERSIONS[@]}; do
  if [ -d ${PERSISTENT_DISK_DIR}/postgres-${version} ]; then

    # Do we have no supported versions installed and also do not have the latest Postgres installed?
    if [ $UPGRADEABLE_VERSION_INSTALLED -eq 0 ] && [ ! -d $STORE_DIR ]; then
        # We never upgraded this BOSH Director from this obsolete version to a supported one.
        # Give a recommendation and exit.
        print_director_upgrade_recommendation_for $version
        exit 1
    fi

    # delete the obsolete directory to free up space
    echo "Deleting obsolete old postgres directory."
    rm -rf "${PERSISTENT_DISK_DIR}/postgres-${version}"
  fi
done

# If the latest Postgres has not yet been configured, configure it:
if [[ ! -d ${STORE_DIR} || ! -f ${STORE_DIR}/postgresql.conf ]]; then
  mkdir -p "${STORE_DIR}"
  chown vcap:vcap "${STORE_DIR}"

  # initdb creates data directories
  su - vcap -c "${PACKAGE_DIR}/bin/initdb -E utf8 -D ${STORE_DIR}"

  touch "${STORE_DIR}/fresh"

  if [ $? != 0 ]; then
    echo "ERROR: Unable to Initialize Postgres DB"
    exit 1
  fi

  echo "host all ${USER} 0.0.0.0/0 md5" >> "${STORE_DIR}/pg_hba.conf"

  mkdir -p "${STORE_DIR}/pg_log"
  chown vcap:vcap "${STORE_DIR}/pg_log"
fi

# If we just configured the latest Postgres, import from the old version
if [[ -f ${STORE_DIR}/fresh ]] ; then
  for version in ${UPGRADEABLE_VERSIONS[@]}; do
    PACKAGE_DIR_OLD=/var/vcap/packages/postgres-$version
    STORE_DIR_OLD=${PERSISTENT_DISK_DIR}/postgres-$version

    if [[ -d ${STORE_DIR_OLD} ]] ; then
      echo "copying contents of postgres-$version to postgres-$CURRENT_POSTGRES_VERSION for postgres upgrade..."
      su - vcap -c "${PACKAGE_DIR}/bin/pg_upgrade \
        --old-bindir=${PACKAGE_DIR_OLD}/bin \
        --new-bindir=${PACKAGE_DIR}/bin \
        --old-datadir=${STORE_DIR_OLD} \
        --new-datadir=${STORE_DIR}"

      echo "successfully upgraded from postgres-$version"
      rm -rf "${STORE_DIR_OLD}"
      break
    fi
  done

  rm "${STORE_DIR}/fresh"
fi

# "bpm enforces its own locking around process operations to avoid race conditions"
# from docs: https://bosh.io/docs/bpm/runtime/
# so postmaster.pid is stale if it still exists
# remove it to prevent running into:
# FATAL:  lock file "postmaster.pid" already exists
if [[ -f ${STORE_DIR}/postmaster.pid ]] ; then
    rm "${STORE_DIR}/postmaster.pid"
fi

# The below code reindexes Postgres databases if the glibc version has changed since we last performed a reindex,
# or if we don't know when we reindexed and are running a version of glibc that made major changes to the system collation.
#  See: <https://wiki.postgresql.org/wiki/Locale_data_changes>
#       <https://www.crunchydata.com/blog/glibc-collations-and-data-corruption>
# for more information about why we do this, and why we consider glibc versions older than 2.28 to be unaffected.
#
# NOTE: If you edit this code, make sure to update the copies in all of the other Postgres versions. Extracting this into a common
#       file and sharing that file amongst the Postgres releases was just as bad as having multiple copies, so this is what we did.

rebuild_postgres_indexes()
{
  POSTGRES_DATABASE_USER="vcap"
  for database in $(echo "select datname from pg_database" | su - vcap -c "${PACKAGE_DIR}/bin/postgres --single -D ${STORE_DIR} postgres | egrep -o '\".*\"'")
  do
    echo "Going to reindex database '$database' in '${STORE_DIR}'"
    echo "REINDEX DATABASE $database" | su - vcap -c "${PACKAGE_DIR}/bin/postgres --single -D ${STORE_DIR} $database"
    # This doesn't work on Postgres versions earlier than 15, because REFRESH COLLATION VERSION isn't a thing until 15.
    echo "ALTER DATABASE $database REFRESH COLLATION VERSION" | su - vcap -c "${PACKAGE_DIR}/bin/postgres --single -D ${STORE_DIR} $database" || /bin/true
  done
}

PREVIOUS_GLIBC_VERSION_DIR=${PERSISTENT_DISK_DIR}/postgres-previous-glibc-tracking/
PREVIOUS_GLIBC_VERSION_FILE=${PREVIOUS_GLIBC_VERSION_DIR}/previous-glibc-version.txt
BREAKING_GLIBC_MAJOR=2
BREAKING_GLIBC_MINOR=28

previous_glibc_version=$(cat $PREVIOUS_GLIBC_VERSION_FILE 2>/dev/null || echo "")
previous_glibc_major=$(echo $previous_glibc_version | cut -d "." -f 1)
previous_glibc_minor=$(echo $previous_glibc_version | cut -d "." -f 2)

current_glibc_version="$(dpkg-query --show --showformat '${Version}\n' libc6 | egrep -o '^[0-9.]+')"
current_glibc_major=$(echo $current_glibc_version | cut -d "." -f 1)
current_glibc_minor=$(echo $current_glibc_version | cut -d "." -f 2)

if [[ -f $PREVIOUS_GLIBC_VERSION_FILE ]]
then
  if [[ $current_glibc_version != $previous_glibc_version ]]
  then
    rebuild_postgres_indexes
  fi
else
  # If we're newer or equal to 2.28, we'll rebuild indexes to handle the issue we know about and any future ones.
  if [[ $current_glibc_major -gt $BREAKING_GLIBC_MAJOR || $current_glibc_minor -ge $BREAKING_GLIBC_MINOR ]]
  then
    rebuild_postgres_indexes
  fi
fi

mkdir -p $PREVIOUS_GLIBC_VERSION_DIR 2>/dev/null
echo $current_glibc_version > $PREVIOUS_GLIBC_VERSION_FILE
