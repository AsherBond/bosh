---
<%
  def blobstore_config(name, config_name)
    config = p(config_name, nil)
    return '' unless config

    provider = config['provider']

    # Some blobstore configs in the manifest have an extra 'options' hash
    # and some just put the options at the same hash level as 'provider'.
    # This line makes 'options' optional.
    config = config['options'] if config['options']

    opts = case provider
      when 's3'
        {
          'bucket_name' => config['bucket_name'],
          'access_key_id' => config['access_key_id'],
          'secret_access_key' => config['secret_access_key'],
        }
      when 'swift'
        swift_provider = config['swift_provider']
        swift_stuff = case swift_provider
          when 'hp'
            {
              'hp' => {
                'hp_access_key' => config['hp_access_key'],
                'hp_secret_key' => config['hp_secret_key'],
                'hp_tenant_id' => config['hp_tenant_id'],
                'hp_avl_zone' => config['hp_avl_zone'],
              }
            }
          when 'openstack'
            openstack_stuff = {
              'openstack' => {
                'openstack_auth_url' => config['openstack_auth_url'],
                'openstack_username' => config['openstack_username'],
                'openstack_api_key' => config['openstack_api_key'],
                'openstack_tenant' => config['openstack_tenant'],
              }
            }
            openstack_stuff['openstack_region'] = config['openstack_region'] if config['openstack_region']
            openstack_stuff
          when 'rackspace'
            rackspace_stuff = {
              'rackspace' => {
                'rackspace_username' => config['rackspace_username'],
                'rackspace_api_key' => config['rackspace_api_key'],
              }
            }
            rackspace_stuff['rackspace_region'] = config['rackspace_region'] if config['rackspace_region']
            rackspace_stuff
        end
        {
          'swift_provider' => swift_provider,
          'container_name' => config['container_name'],
        }.merge(swift_stuff)
      else {
        'endpoint' => config['address'],
        'user' => config['user'],
        'password' => config['password'],
      }
    end

    { 'provider' => provider, 'options' => opts }.to_yaml
  end
%>

name: <%= p('director.name') %>
port: <%= p('director.backend_port') %>
encryption: <%= p('director.encryption') %>
max_tasks: <%= p('director.max_tasks') %>
max_threads: <%= p('director.max_threads') %>
logging:
  level: DEBUG
  file: /var/vcap/sys/log/director/<%%= ENV["COMPONENT"] %>.debug.log
<% if_p("resque.loglevel") do |resque_loglevel| %>
resque:
  logging:
    level: <%= resque_loglevel %>
<% end %>    
redis:
  host: <%= p('redis.address') %>
  port: <%= p('redis.port') %>
  password: <%= p('redis.password') %>
  logging:
    level: <%= p('redis.loglevel') %>
mbus: nats://<%= p('nats.user') %>:<%= p('nats.password') %>@<%= p('nats.address') %>:<%= p('nats.port') %>
dir: /var/vcap/store/director
db:
  adapter: <%= p('director.db.adapter') %>
  user: <%= p('director.db.user') %>
  password: <%= p('director.db.password') %>
  host: <%= p('director.db.host') %>
  port: <%= p('director.db.port') %>
  database: <%= p('director.db.database') %>
  connection_options: <%= JSON.generate(p('director.db.connection_options')) %>
snapshots:
  enabled: <%= p('director.enable_snapshots') %>
scheduled_jobs:
  <% if_p('director.snapshot_schedule') do |snapshot_schedule| %>
  - command: snapshot_deployments
    schedule: <%= snapshot_schedule %>
  <% end %>
  <% if_p('director.self_snapshot_schedule') do |self_snapshot_schedule| %>
  - command: snapshot_self
    schedule: <%= self_snapshot_schedule %>
  <% end %>
scan_and_fix:
  auto_fix_stateful_nodes: <%= p('director.auto_fix_stateful_nodes') %>
<% if_p('dns.db.adapter', 'dns.db.user', 'dns.db.password', 'dns.db.host',
        'dns.db.port', 'dns.db.database', 'dns.db.connection_options', 'dns.address') do |
                        adapter, user, password, db_host, port, database, connection_options, address| %>
dns:
  server: <%= address %>
  <% if_p('dns.domain_name') do |domain_name| %>
  domain_name: <%= domain_name %>
  <% end %>
  db:
    adapter: <%= adapter %>
    user: <%= user %>
    password: <%= password %>
    host: <%= db_host %>
    port: <%= port %>
    database: <%= database %>
    connection_options: <%= JSON.generate(connection_options) %>
<% end %>

<%= blobstore_config('blobstore', 'blobstore') %>
<%= blobstore_config('backup_destination', 'director.backup_destination') %>
<%= blobstore_config('compiled_package_cache', 'compiled_package_cache') %>

cloud:
<% plugin = nil %>
<% if_p('aws.access_key_id', 'aws.secret_access_key',
        'aws.default_key_name', 'aws.default_security_groups',
        'aws.region', 'registry.address',
        'registry.http.port', 'registry.http.user',
        'registry.http.password') do |access_key_id, secret_access_key,
                                          default_key_name, default_security_groups,
                                          region, reg_address,
                                          reg_port, reg_user,
                                          reg_password| %>
  plugin: aws <% plugin = "aws" %>
  properties:
    aws:
      access_key_id: <%= access_key_id %>
      secret_access_key: <%= secret_access_key %>
      default_key_name: <%= default_key_name %>
      default_security_groups: <%= default_security_groups %>
      region: <%= region %>
    registry:
      endpoint: http://<%= reg_address %>:<%= reg_port %>
      user: <%= reg_user %>
      password: <%= reg_password %>
    <% if_p('aws.stemcell.kernel_id') do |kernel_id| %>
    stemcell:
      kernel_id: <%= kernel_id %>
    <% end %>
<% end %>
<% if_p('openstack.auth_url', 'openstack.username', 'openstack.api_key',
        'openstack.tenant', 'openstack.default_key_name',
        'openstack.default_security_groups', 'registry.address',
        'registry.http.port', 'registry.http.user',
        'registry.http.password') do |auth_url, username, api_key,
                                                tenant, default_key_name,
                                                default_security_groups, reg_address,
                                                reg_port, reg_user,
                                                reg_password| %>
  plugin: openstack <% plugin = "openstack" %>
  properties:
    openstack:
      auth_url: <%= auth_url %>
      username: <%= username %>
      api_key: <%= api_key %>
      tenant: <%= tenant %>
      <% if_p("openstack.region") do |region| %>
      region: <%= region %>
      <% end %>
      <% if_p("openstack.endpoint_type") do |endpoint_type| %>
      endpoint_type: <%= endpoint_type %>
      <% end %>
      <% if_p("openstack.state_timeout") do |state_timeout| %>
      state_timeout: <%= state_timeout %>
      <% end %>
      <% if_p("openstack.stemcell_public_visibility") do |stemcell_public_visibility| %>
      stemcell_public_visibility: <%= stemcell_public_visibility %>
      <% end %>
      default_key_name: <%= default_key_name %>
      default_security_groups: <%= default_security_groups %>
    registry:
      endpoint: http://<%= reg_address %>:<%= reg_port %>
      user: <%= reg_user %>
      password: <%= reg_password %>
<% end %>
<% if_p('vcenter.address', 'vcenter.user', 'vcenter.password', 'vcenter.datacenters') do |address, user, password, datacenters| %>
  plugin: vsphere <% plugin = "vsphere" %>
  properties:
    mem_overcommit_ratio: 0.7
    cpi_log: /var/vcap/sys/log/director/<%%= ENV["COMPONENT"] %>.cpi.log
    vcenters:
      - host: <%= address %>
        user: <%= user %>
        password: <%= password %>
        datacenters:
          <% datacenters.each do |dc| %>
          - name: <%= dc['name'] %>
            vm_folder: <%= dc['vm_folder'] || "BOSH_VMs" %>
            template_folder: <%= dc['template_folder'] || "BOSH_Templates" %>
            disk_path: <%= dc['disk_path'] || "BOSH_Disks" %>
            datastore_pattern: <%= dc['datastore_pattern'] %>
            persistent_datastore_pattern: <%= dc['persistent_datastore_pattern'] %>
            allow_mixed_datastores: <%= dc.fetch('allow_mixed_datastores', true) %>
            clusters:
              <% dc['clusters'].each do |cluster| %>
                <% case cluster
                   when Hash %>
                  <% cluster.each do |cluster_name, cluster_properties| %>
              - <%= cluster_name.to_s %>:
                    <% cluster_properties.each do |k, v| %>
                  <%= "#{k.to_s}: #{v}" %>
                    <% end %>
                  <% end %>
                <% when String %>
              - <%= cluster.to_s %>
                <% end %>
              <% end %>
          <% end %>
<% end %>
<% if_p('vcd.url', 'vcd.user', 'vcd.password',
        'vcd.entities.organization', 'vcd.entities.virtual_datacenter',
        'vcd.entities.vapp_catalog', 'vcd.entities.media_catalog',
        'vcd.entities.vm_metadata_key', 'vcd.entities.description') do |url, user, password,
                                                                        organization, datacenter,
                                                                        vapp_catalog, media_catalog,
                                                                        vm_metadata_key, description| %>
  plugin: vcloud <% plugin = "vcloud" %>
  properties:
    vcds:
      - url: <%= url %>
        user: <%= user %>
        password: <%= password %>
        entities:
          organization: <%= organization %>
          virtual_datacenter: <%= datacenter %>
          vapp_catalog: <%= vapp_catalog %>
          media_catalog: <%= media_catalog %>
          vm_metadata_key: <%= vm_metadata_key %>
          description: <%= description %>
<% end %>
<% raise "Could not find cloud plugin" if plugin.nil? %>
    agent:
      ntp: [<%= p('ntp').join(", ") %>]
      blobstore:
        provider: <%= p('blobstore.provider') %>
        options:
      <% if p('blobstore.provider') == "s3" %>
          bucket_name: <%= p('blobstore.bucket_name') %>
          access_key_id: <%= p(['agent.blobstore.access_key_id', 'blobstore.access_key_id']) %>
          secret_access_key: <%= p(['agent.blobstore.secret_access_key', 'blobstore.secret_access_key']) %>
      <% else %>
          endpoint: 'http://<%= p(['agent.blobstore.address', 'blobstore.address']) %>:<%= p('blobstore.port') %>'
          user: <%= p('blobstore.agent.user') %>
          password: <%= p('blobstore.agent.password') %>
      <% end %>
      mbus: nats://<%= p('nats.user') %>:<%= p('nats.password') %>@<%= p(['agent.nats.address', 'nats.address']) %>:<%= p('nats.port') %>
